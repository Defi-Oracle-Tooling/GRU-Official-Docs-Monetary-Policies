type IndexWeightsUpdated @entity { id: ID! indexId: Bytes! version: BigInt! }

type DashboardSnapshot @entity { id: ID! dashboardHash: Bytes globalVersion: BigInt liCRI: BigInt timestamp: BigInt }

type BondIssued @entity { id: ID! series: Bytes! to: Bytes! notional: BigInt! }

type CouponsAccrued @entity { id: ID! series: Bytes! amount: BigInt! }

type BondBuyback @entity { id: ID! series: Bytes! principalClosed: BigInt! }

type CutProposed @entity { id: ID! proposalId: Bytes! proposer: Bytes! init: Bytes initData: Bytes }

type CutQueued @entity { id: ID! proposalId: Bytes! eta: BigInt! }

type CutExecuted @entity { id: ID! proposalId: Bytes! }

type EmergencyBrake @entity { id: ID! selector: Bytes! paused: Boolean! }

type FunctionPaused @entity { id: ID! selector: Bytes! paused: Boolean! }

type PoRPosted @entity { id: ID! period: BigInt! root: Bytes! ipfsRef: String! }

type PoRSealed @entity { id: ID! period: BigInt! }

type RateSet @entity { id: ID! fromAsset: Bytes! toAsset: Bytes! rate: BigInt! }

type Triangulated @entity { id: ID! fromAsset: Bytes! toAsset: Bytes! inputAmount: BigInt! outputAmount: BigInt! }

type Redeemed @entity { id: ID! fromAsset: Bytes! toAsset: Bytes! inputAmount: BigInt! outputAmount: BigInt! }

type FeeUpdated @entity { id: ID! oldFeeBps: BigInt! newFeeBps: BigInt! }

# Daily LiCRI snapshot (aggregated from DashboardSnapshot events)
type DailyLiCRISnapshot @entity {
	id: ID!            # day key YYYY-MM-DD
	dayStart: BigInt!  # unix start of day
	lastLiCRI: BigInt! # latest LiCRI seen this day
	globalVersion: BigInt!
	updates: Int!      # number of snapshots processed
}

# Governance proposal lifecycle tracking
type GovernanceProposal @entity {
	id: ID!              # proposalId bytes32 hex
	proposer: Bytes
	init: Bytes
	initData: Bytes
	eta: BigInt          # set on queue
	executed: Boolean!   # true when executed
	queued: Boolean!     # true when queued
	createdAt: BigInt!   # block timestamp of proposal
	executedAt: BigInt   # block timestamp of execution
}
