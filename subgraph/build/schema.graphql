type IndexWeightsUpdated @entity { id: ID! indexId: Bytes! version: BigInt! }

type DashboardSnapshot @entity { id: ID! dashboardHash: Bytes globalVersion: BigInt liCRI: BigInt timestamp: BigInt }

type BondIssued @entity { id: ID! series: Bytes! to: Bytes! notional: BigInt! }

type CouponsAccrued @entity { id: ID! series: Bytes! amount: BigInt! }

type BondBuyback @entity { id: ID! series: Bytes! principalClosed: BigInt! }

type CutProposed @entity { id: ID! proposalId: Bytes! proposer: Bytes! init: Bytes initData: Bytes }

type CutQueued @entity { id: ID! proposalId: Bytes! eta: BigInt! }

type CutExecuted @entity { id: ID! proposalId: Bytes! }

type EmergencyBrake @entity { id: ID! selector: Bytes! paused: Boolean! }

type FunctionPaused @entity { id: ID! selector: Bytes! paused: Boolean! }

type PoRPosted @entity { id: ID! period: BigInt! root: Bytes! ipfsRef: String! }

type PoRSealed @entity { id: ID! period: BigInt! }

type RateSet @entity { id: ID! fromAsset: Bytes! toAsset: Bytes! rate: BigInt! }

type Triangulated @entity { id: ID! fromAsset: Bytes! toAsset: Bytes! inputAmount: BigInt! outputAmount: BigInt! }

type Redeemed @entity { id: ID! fromAsset: Bytes! toAsset: Bytes! inputAmount: BigInt! outputAmount: BigInt! }

type FeeUpdated @entity { id: ID! oldFeeBps: BigInt! newFeeBps: BigInt! }

# Daily LiCRI snapshot (aggregated from DashboardSnapshot events)
type DailyLiCRISnapshot @entity {
	id: ID!            # day key YYYY-MM-DD
	dayStart: BigInt!  # unix start of day
	lastLiCRI: BigInt! # latest LiCRI seen this day
	globalVersion: BigInt!
	updates: Int!      # number of snapshots processed
	cumulativeLiCRI: BigInt        # prefix sum of daily lastLiCRI across days
	cumulativeLiCRISquared: BigInt # prefix sum of squared LiCRI for variance calc
	ma7: BigInt                    # 7-day moving average (integer truncated)
	ma30: BigInt                   # 30-day moving average (integer truncated)
	variance7: BigInt              # 7-day variance numerator (scaled) without sqrt
	variance30: BigInt             # 30-day variance numerator (scaled) without sqrt
	stdDev7: BigInt                # integer sqrt(variance7/7) truncated
	stdDev30: BigInt               # integer sqrt(variance30/30) truncated
	ma90: BigInt                   # 90-day moving average
	ma180: BigInt                  # 180-day moving average
	variance90: BigInt             # 90-day variance numerator
	variance180: BigInt            # 180-day variance numerator
	stdDev90: BigInt               # sqrt(variance90/90)
	stdDev180: BigInt              # sqrt(variance180/180)
	ema7: BigInt                   # exponential moving average 7d
	ema30: BigInt                  # exponential moving average 30d
	ema90: BigInt                  # exponential moving average 90d
	ema180: BigInt                 # exponential moving average 180d
	ci95Upper7: BigInt             # ma7 + 1.96*stdDev7
	ci95Lower7: BigInt             # ma7 - 1.96*stdDev7
	ci95Upper30: BigInt            # ma30 + 1.96*stdDev30
	ci95Lower30: BigInt            # ma30 - 1.96*stdDev30
	ci95Upper90: BigInt            # ma90 + 1.96*stdDev90
	ci95Lower90: BigInt            # ma90 - 1.96*stdDev90
	ci95Upper180: BigInt           # ma180 + 1.96*stdDev180
	ci95Lower180: BigInt           # ma180 - 1.96*stdDev180
	alpha7: Int                    # smoothing factor scaled 1e6 (2/(7+1))
	alpha30: Int                   # smoothing factor scaled 1e6
	alpha90: Int                   # smoothing factor scaled 1e6
	alpha180: Int                  # smoothing factor scaled 1e6
}
# Rolling window aggregates for LiCRI (generic entity, one per window/day)
type LiCRIRollingWindow @entity {
	id: ID!                  # dayStart-windowSize
	dayStart: BigInt!        # end day of window
	windowSize: Int!         # number of days (e.g. 7 or 30)
	average: BigInt!         # average LiCRI over window (truncated)
	varianceNumerator: BigInt! # sumSq - (sum^2)/n for the window
	stdDev: BigInt!          # integer sqrt(varianceNumerator / n)
}

# Governance proposal lifecycle tracking
type GovernanceProposal @entity {
	id: ID!              # proposalId bytes32 hex
	proposer: Bytes
	init: Bytes
	initData: Bytes
	eta: BigInt          # set on queue
	executed: Boolean!   # true when executed
	queued: Boolean!     # true when queued
	createdAt: BigInt!   # block timestamp of proposal
	executedAt: BigInt   # block timestamp of execution
}

# Bond coupon daily aggregation per series
type BondSeriesCouponSnapshot @entity {
	id: ID!              # seriesHex-dayStart composite
	series: Bytes!
	dayStart: BigInt!
	cumulativeCoupons: BigInt!  # total coupons accrued for series that day (sum of events)
	updates: Int!
}
