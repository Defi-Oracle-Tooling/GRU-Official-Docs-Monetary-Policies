// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IndexWeightsUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexWeightsUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IndexWeightsUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IndexWeightsUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): IndexWeightsUpdated | null {
    return changetype<IndexWeightsUpdated | null>(
      store.get_in_block("IndexWeightsUpdated", id)
    );
  }

  static load(id: string): IndexWeightsUpdated | null {
    return changetype<IndexWeightsUpdated | null>(
      store.get("IndexWeightsUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get indexId(): Bytes {
    let value = this.get("indexId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set indexId(value: Bytes) {
    this.set("indexId", Value.fromBytes(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }
}

export class DashboardSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DashboardSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DashboardSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DashboardSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DashboardSnapshot | null {
    return changetype<DashboardSnapshot | null>(
      store.get_in_block("DashboardSnapshot", id)
    );
  }

  static load(id: string): DashboardSnapshot | null {
    return changetype<DashboardSnapshot | null>(
      store.get("DashboardSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dashboardHash(): Bytes | null {
    let value = this.get("dashboardHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dashboardHash(value: Bytes | null) {
    if (!value) {
      this.unset("dashboardHash");
    } else {
      this.set("dashboardHash", Value.fromBytes(<Bytes>value));
    }
  }

  get globalVersion(): BigInt | null {
    let value = this.get("globalVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set globalVersion(value: BigInt | null) {
    if (!value) {
      this.unset("globalVersion");
    } else {
      this.set("globalVersion", Value.fromBigInt(<BigInt>value));
    }
  }

  get liCRI(): BigInt | null {
    let value = this.get("liCRI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liCRI(value: BigInt | null) {
    if (!value) {
      this.unset("liCRI");
    } else {
      this.set("liCRI", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class BondIssued extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondIssued entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondIssued must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BondIssued", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondIssued | null {
    return changetype<BondIssued | null>(store.get_in_block("BondIssued", id));
  }

  static load(id: string): BondIssued | null {
    return changetype<BondIssued | null>(store.get("BondIssued", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get series(): Bytes {
    let value = this.get("series");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set series(value: Bytes) {
    this.set("series", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get notional(): BigInt {
    let value = this.get("notional");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set notional(value: BigInt) {
    this.set("notional", Value.fromBigInt(value));
  }
}

export class CouponsAccrued extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CouponsAccrued entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CouponsAccrued must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CouponsAccrued", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CouponsAccrued | null {
    return changetype<CouponsAccrued | null>(
      store.get_in_block("CouponsAccrued", id)
    );
  }

  static load(id: string): CouponsAccrued | null {
    return changetype<CouponsAccrued | null>(store.get("CouponsAccrued", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get series(): Bytes {
    let value = this.get("series");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set series(value: Bytes) {
    this.set("series", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class BondBuyback extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondBuyback entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondBuyback must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BondBuyback", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondBuyback | null {
    return changetype<BondBuyback | null>(
      store.get_in_block("BondBuyback", id)
    );
  }

  static load(id: string): BondBuyback | null {
    return changetype<BondBuyback | null>(store.get("BondBuyback", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get series(): Bytes {
    let value = this.get("series");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set series(value: Bytes) {
    this.set("series", Value.fromBytes(value));
  }

  get principalClosed(): BigInt {
    let value = this.get("principalClosed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalClosed(value: BigInt) {
    this.set("principalClosed", Value.fromBigInt(value));
  }
}

export class CutProposed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CutProposed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CutProposed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CutProposed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CutProposed | null {
    return changetype<CutProposed | null>(
      store.get_in_block("CutProposed", id)
    );
  }

  static load(id: string): CutProposed | null {
    return changetype<CutProposed | null>(store.get("CutProposed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): Bytes {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposalId(value: Bytes) {
    this.set("proposalId", Value.fromBytes(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get init(): Bytes | null {
    let value = this.get("init");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set init(value: Bytes | null) {
    if (!value) {
      this.unset("init");
    } else {
      this.set("init", Value.fromBytes(<Bytes>value));
    }
  }

  get initData(): Bytes | null {
    let value = this.get("initData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initData(value: Bytes | null) {
    if (!value) {
      this.unset("initData");
    } else {
      this.set("initData", Value.fromBytes(<Bytes>value));
    }
  }
}

export class CutQueued extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CutQueued entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CutQueued must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CutQueued", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CutQueued | null {
    return changetype<CutQueued | null>(store.get_in_block("CutQueued", id));
  }

  static load(id: string): CutQueued | null {
    return changetype<CutQueued | null>(store.get("CutQueued", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): Bytes {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposalId(value: Bytes) {
    this.set("proposalId", Value.fromBytes(value));
  }

  get eta(): BigInt {
    let value = this.get("eta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eta(value: BigInt) {
    this.set("eta", Value.fromBigInt(value));
  }
}

export class CutExecuted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CutExecuted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CutExecuted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CutExecuted", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CutExecuted | null {
    return changetype<CutExecuted | null>(
      store.get_in_block("CutExecuted", id)
    );
  }

  static load(id: string): CutExecuted | null {
    return changetype<CutExecuted | null>(store.get("CutExecuted", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): Bytes {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposalId(value: Bytes) {
    this.set("proposalId", Value.fromBytes(value));
  }
}

export class EmergencyBrake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EmergencyBrake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EmergencyBrake must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EmergencyBrake", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EmergencyBrake | null {
    return changetype<EmergencyBrake | null>(
      store.get_in_block("EmergencyBrake", id)
    );
  }

  static load(id: string): EmergencyBrake | null {
    return changetype<EmergencyBrake | null>(store.get("EmergencyBrake", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get selector(): Bytes {
    let value = this.get("selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set selector(value: Bytes) {
    this.set("selector", Value.fromBytes(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }
}

export class FunctionPaused extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FunctionPaused entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FunctionPaused must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FunctionPaused", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FunctionPaused | null {
    return changetype<FunctionPaused | null>(
      store.get_in_block("FunctionPaused", id)
    );
  }

  static load(id: string): FunctionPaused | null {
    return changetype<FunctionPaused | null>(store.get("FunctionPaused", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get selector(): Bytes {
    let value = this.get("selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set selector(value: Bytes) {
    this.set("selector", Value.fromBytes(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }
}

export class PoRPosted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoRPosted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoRPosted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoRPosted", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoRPosted | null {
    return changetype<PoRPosted | null>(store.get_in_block("PoRPosted", id));
  }

  static load(id: string): PoRPosted | null {
    return changetype<PoRPosted | null>(store.get("PoRPosted", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get period(): BigInt {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set period(value: BigInt) {
    this.set("period", Value.fromBigInt(value));
  }

  get root(): Bytes {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set root(value: Bytes) {
    this.set("root", Value.fromBytes(value));
  }

  get ipfsRef(): string {
    let value = this.get("ipfsRef");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ipfsRef(value: string) {
    this.set("ipfsRef", Value.fromString(value));
  }
}

export class PoRSealed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoRSealed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoRSealed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoRSealed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoRSealed | null {
    return changetype<PoRSealed | null>(store.get_in_block("PoRSealed", id));
  }

  static load(id: string): PoRSealed | null {
    return changetype<PoRSealed | null>(store.get("PoRSealed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get period(): BigInt {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set period(value: BigInt) {
    this.set("period", Value.fromBigInt(value));
  }
}

export class RateSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RateSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RateSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RateSet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RateSet | null {
    return changetype<RateSet | null>(store.get_in_block("RateSet", id));
  }

  static load(id: string): RateSet | null {
    return changetype<RateSet | null>(store.get("RateSet", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromAsset(): Bytes {
    let value = this.get("fromAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fromAsset(value: Bytes) {
    this.set("fromAsset", Value.fromBytes(value));
  }

  get toAsset(): Bytes {
    let value = this.get("toAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set toAsset(value: Bytes) {
    this.set("toAsset", Value.fromBytes(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }
}

export class Triangulated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Triangulated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Triangulated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Triangulated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Triangulated | null {
    return changetype<Triangulated | null>(
      store.get_in_block("Triangulated", id)
    );
  }

  static load(id: string): Triangulated | null {
    return changetype<Triangulated | null>(store.get("Triangulated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromAsset(): Bytes {
    let value = this.get("fromAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fromAsset(value: Bytes) {
    this.set("fromAsset", Value.fromBytes(value));
  }

  get toAsset(): Bytes {
    let value = this.get("toAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set toAsset(value: Bytes) {
    this.set("toAsset", Value.fromBytes(value));
  }

  get inputAmount(): BigInt {
    let value = this.get("inputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set inputAmount(value: BigInt) {
    this.set("inputAmount", Value.fromBigInt(value));
  }

  get outputAmount(): BigInt {
    let value = this.get("outputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set outputAmount(value: BigInt) {
    this.set("outputAmount", Value.fromBigInt(value));
  }
}

export class Redeemed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redeemed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Redeemed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Redeemed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Redeemed | null {
    return changetype<Redeemed | null>(store.get_in_block("Redeemed", id));
  }

  static load(id: string): Redeemed | null {
    return changetype<Redeemed | null>(store.get("Redeemed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromAsset(): Bytes {
    let value = this.get("fromAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fromAsset(value: Bytes) {
    this.set("fromAsset", Value.fromBytes(value));
  }

  get toAsset(): Bytes {
    let value = this.get("toAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set toAsset(value: Bytes) {
    this.set("toAsset", Value.fromBytes(value));
  }

  get inputAmount(): BigInt {
    let value = this.get("inputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set inputAmount(value: BigInt) {
    this.set("inputAmount", Value.fromBigInt(value));
  }

  get outputAmount(): BigInt {
    let value = this.get("outputAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set outputAmount(value: BigInt) {
    this.set("outputAmount", Value.fromBigInt(value));
  }
}

export class FeeUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeeUpdated | null {
    return changetype<FeeUpdated | null>(store.get_in_block("FeeUpdated", id));
  }

  static load(id: string): FeeUpdated | null {
    return changetype<FeeUpdated | null>(store.get("FeeUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldFeeBps(): BigInt {
    let value = this.get("oldFeeBps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oldFeeBps(value: BigInt) {
    this.set("oldFeeBps", Value.fromBigInt(value));
  }

  get newFeeBps(): BigInt {
    let value = this.get("newFeeBps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newFeeBps(value: BigInt) {
    this.set("newFeeBps", Value.fromBigInt(value));
  }
}

export class DailyLiCRISnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyLiCRISnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyLiCRISnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyLiCRISnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyLiCRISnapshot | null {
    return changetype<DailyLiCRISnapshot | null>(
      store.get_in_block("DailyLiCRISnapshot", id)
    );
  }

  static load(id: string): DailyLiCRISnapshot | null {
    return changetype<DailyLiCRISnapshot | null>(
      store.get("DailyLiCRISnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayStart(): BigInt {
    let value = this.get("dayStart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dayStart(value: BigInt) {
    this.set("dayStart", Value.fromBigInt(value));
  }

  get lastLiCRI(): BigInt {
    let value = this.get("lastLiCRI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastLiCRI(value: BigInt) {
    this.set("lastLiCRI", Value.fromBigInt(value));
  }

  get globalVersion(): BigInt {
    let value = this.get("globalVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set globalVersion(value: BigInt) {
    this.set("globalVersion", Value.fromBigInt(value));
  }

  get updates(): i32 {
    let value = this.get("updates");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set updates(value: i32) {
    this.set("updates", Value.fromI32(value));
  }

  get cumulativeLiCRI(): BigInt | null {
    let value = this.get("cumulativeLiCRI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeLiCRI(value: BigInt | null) {
    if (!value) {
      this.unset("cumulativeLiCRI");
    } else {
      this.set("cumulativeLiCRI", Value.fromBigInt(<BigInt>value));
    }
  }

  get cumulativeLiCRISquared(): BigInt | null {
    let value = this.get("cumulativeLiCRISquared");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeLiCRISquared(value: BigInt | null) {
    if (!value) {
      this.unset("cumulativeLiCRISquared");
    } else {
      this.set("cumulativeLiCRISquared", Value.fromBigInt(<BigInt>value));
    }
  }

  get ma7(): BigInt | null {
    let value = this.get("ma7");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ma7(value: BigInt | null) {
    if (!value) {
      this.unset("ma7");
    } else {
      this.set("ma7", Value.fromBigInt(<BigInt>value));
    }
  }

  get ma30(): BigInt | null {
    let value = this.get("ma30");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ma30(value: BigInt | null) {
    if (!value) {
      this.unset("ma30");
    } else {
      this.set("ma30", Value.fromBigInt(<BigInt>value));
    }
  }

  get variance7(): BigInt | null {
    let value = this.get("variance7");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set variance7(value: BigInt | null) {
    if (!value) {
      this.unset("variance7");
    } else {
      this.set("variance7", Value.fromBigInt(<BigInt>value));
    }
  }

  get variance30(): BigInt | null {
    let value = this.get("variance30");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set variance30(value: BigInt | null) {
    if (!value) {
      this.unset("variance30");
    } else {
      this.set("variance30", Value.fromBigInt(<BigInt>value));
    }
  }

  get stdDev7(): BigInt | null {
    let value = this.get("stdDev7");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stdDev7(value: BigInt | null) {
    if (!value) {
      this.unset("stdDev7");
    } else {
      this.set("stdDev7", Value.fromBigInt(<BigInt>value));
    }
  }

  get stdDev30(): BigInt | null {
    let value = this.get("stdDev30");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stdDev30(value: BigInt | null) {
    if (!value) {
      this.unset("stdDev30");
    } else {
      this.set("stdDev30", Value.fromBigInt(<BigInt>value));
    }
  }

  get ma90(): BigInt | null {
    let value = this.get("ma90");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ma90(value: BigInt | null) {
    if (!value) {
      this.unset("ma90");
    } else {
      this.set("ma90", Value.fromBigInt(<BigInt>value));
    }
  }

  get ma180(): BigInt | null {
    let value = this.get("ma180");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ma180(value: BigInt | null) {
    if (!value) {
      this.unset("ma180");
    } else {
      this.set("ma180", Value.fromBigInt(<BigInt>value));
    }
  }

  get variance90(): BigInt | null {
    let value = this.get("variance90");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set variance90(value: BigInt | null) {
    if (!value) {
      this.unset("variance90");
    } else {
      this.set("variance90", Value.fromBigInt(<BigInt>value));
    }
  }

  get variance180(): BigInt | null {
    let value = this.get("variance180");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set variance180(value: BigInt | null) {
    if (!value) {
      this.unset("variance180");
    } else {
      this.set("variance180", Value.fromBigInt(<BigInt>value));
    }
  }

  get stdDev90(): BigInt | null {
    let value = this.get("stdDev90");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stdDev90(value: BigInt | null) {
    if (!value) {
      this.unset("stdDev90");
    } else {
      this.set("stdDev90", Value.fromBigInt(<BigInt>value));
    }
  }

  get stdDev180(): BigInt | null {
    let value = this.get("stdDev180");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stdDev180(value: BigInt | null) {
    if (!value) {
      this.unset("stdDev180");
    } else {
      this.set("stdDev180", Value.fromBigInt(<BigInt>value));
    }
  }

  get ema7(): BigInt | null {
    let value = this.get("ema7");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ema7(value: BigInt | null) {
    if (!value) {
      this.unset("ema7");
    } else {
      this.set("ema7", Value.fromBigInt(<BigInt>value));
    }
  }

  get ema30(): BigInt | null {
    let value = this.get("ema30");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ema30(value: BigInt | null) {
    if (!value) {
      this.unset("ema30");
    } else {
      this.set("ema30", Value.fromBigInt(<BigInt>value));
    }
  }

  get ema90(): BigInt | null {
    let value = this.get("ema90");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ema90(value: BigInt | null) {
    if (!value) {
      this.unset("ema90");
    } else {
      this.set("ema90", Value.fromBigInt(<BigInt>value));
    }
  }

  get ema180(): BigInt | null {
    let value = this.get("ema180");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ema180(value: BigInt | null) {
    if (!value) {
      this.unset("ema180");
    } else {
      this.set("ema180", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Upper7(): BigInt | null {
    let value = this.get("ci95Upper7");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Upper7(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Upper7");
    } else {
      this.set("ci95Upper7", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Lower7(): BigInt | null {
    let value = this.get("ci95Lower7");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Lower7(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Lower7");
    } else {
      this.set("ci95Lower7", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Upper30(): BigInt | null {
    let value = this.get("ci95Upper30");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Upper30(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Upper30");
    } else {
      this.set("ci95Upper30", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Lower30(): BigInt | null {
    let value = this.get("ci95Lower30");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Lower30(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Lower30");
    } else {
      this.set("ci95Lower30", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Upper90(): BigInt | null {
    let value = this.get("ci95Upper90");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Upper90(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Upper90");
    } else {
      this.set("ci95Upper90", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Lower90(): BigInt | null {
    let value = this.get("ci95Lower90");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Lower90(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Lower90");
    } else {
      this.set("ci95Lower90", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Upper180(): BigInt | null {
    let value = this.get("ci95Upper180");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Upper180(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Upper180");
    } else {
      this.set("ci95Upper180", Value.fromBigInt(<BigInt>value));
    }
  }

  get ci95Lower180(): BigInt | null {
    let value = this.get("ci95Lower180");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ci95Lower180(value: BigInt | null) {
    if (!value) {
      this.unset("ci95Lower180");
    } else {
      this.set("ci95Lower180", Value.fromBigInt(<BigInt>value));
    }
  }

  get alpha7(): i32 {
    let value = this.get("alpha7");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set alpha7(value: i32) {
    this.set("alpha7", Value.fromI32(value));
  }

  get alpha30(): i32 {
    let value = this.get("alpha30");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set alpha30(value: i32) {
    this.set("alpha30", Value.fromI32(value));
  }

  get alpha90(): i32 {
    let value = this.get("alpha90");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set alpha90(value: i32) {
    this.set("alpha90", Value.fromI32(value));
  }

  get alpha180(): i32 {
    let value = this.get("alpha180");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set alpha180(value: i32) {
    this.set("alpha180", Value.fromI32(value));
  }
}

export class LiCRIRollingWindow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiCRIRollingWindow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiCRIRollingWindow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiCRIRollingWindow", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiCRIRollingWindow | null {
    return changetype<LiCRIRollingWindow | null>(
      store.get_in_block("LiCRIRollingWindow", id)
    );
  }

  static load(id: string): LiCRIRollingWindow | null {
    return changetype<LiCRIRollingWindow | null>(
      store.get("LiCRIRollingWindow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayStart(): BigInt {
    let value = this.get("dayStart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dayStart(value: BigInt) {
    this.set("dayStart", Value.fromBigInt(value));
  }

  get windowSize(): i32 {
    let value = this.get("windowSize");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set windowSize(value: i32) {
    this.set("windowSize", Value.fromI32(value));
  }

  get average(): BigInt {
    let value = this.get("average");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set average(value: BigInt) {
    this.set("average", Value.fromBigInt(value));
  }

  get varianceNumerator(): BigInt {
    let value = this.get("varianceNumerator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set varianceNumerator(value: BigInt) {
    this.set("varianceNumerator", Value.fromBigInt(value));
  }

  get stdDev(): BigInt {
    let value = this.get("stdDev");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stdDev(value: BigInt) {
    this.set("stdDev", Value.fromBigInt(value));
  }
}

export class GovernanceProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GovernanceProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GovernanceProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GovernanceProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GovernanceProposal | null {
    return changetype<GovernanceProposal | null>(
      store.get_in_block("GovernanceProposal", id)
    );
  }

  static load(id: string): GovernanceProposal | null {
    return changetype<GovernanceProposal | null>(
      store.get("GovernanceProposal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): Bytes | null {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proposer(value: Bytes | null) {
    if (!value) {
      this.unset("proposer");
    } else {
      this.set("proposer", Value.fromBytes(<Bytes>value));
    }
  }

  get init(): Bytes | null {
    let value = this.get("init");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set init(value: Bytes | null) {
    if (!value) {
      this.unset("init");
    } else {
      this.set("init", Value.fromBytes(<Bytes>value));
    }
  }

  get initData(): Bytes | null {
    let value = this.get("initData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initData(value: Bytes | null) {
    if (!value) {
      this.unset("initData");
    } else {
      this.set("initData", Value.fromBytes(<Bytes>value));
    }
  }

  get eta(): BigInt | null {
    let value = this.get("eta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eta(value: BigInt | null) {
    if (!value) {
      this.unset("eta");
    } else {
      this.set("eta", Value.fromBigInt(<BigInt>value));
    }
  }

  get executed(): boolean {
    let value = this.get("executed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get queued(): boolean {
    let value = this.get("queued");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set queued(value: boolean) {
    this.set("queued", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get executedAt(): BigInt | null {
    let value = this.get("executedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedAt(value: BigInt | null) {
    if (!value) {
      this.unset("executedAt");
    } else {
      this.set("executedAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class BondSeriesCouponSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BondSeriesCouponSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondSeriesCouponSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BondSeriesCouponSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondSeriesCouponSnapshot | null {
    return changetype<BondSeriesCouponSnapshot | null>(
      store.get_in_block("BondSeriesCouponSnapshot", id)
    );
  }

  static load(id: string): BondSeriesCouponSnapshot | null {
    return changetype<BondSeriesCouponSnapshot | null>(
      store.get("BondSeriesCouponSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get series(): Bytes {
    let value = this.get("series");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set series(value: Bytes) {
    this.set("series", Value.fromBytes(value));
  }

  get dayStart(): BigInt {
    let value = this.get("dayStart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dayStart(value: BigInt) {
    this.set("dayStart", Value.fromBigInt(value));
  }

  get cumulativeCoupons(): BigInt {
    let value = this.get("cumulativeCoupons");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeCoupons(value: BigInt) {
    this.set("cumulativeCoupons", Value.fromBigInt(value));
  }

  get updates(): i32 {
    let value = this.get("updates");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set updates(value: i32) {
    this.set("updates", Value.fromI32(value));
  }
}
